=encoding UTF-8

=head1 NAME

Test2::Tools::xUnit - Perl xUnit framework built on Test2::Workflow

=for html
<a href=https://travis-ci.org/cv-library/Test2-Tools-xUnit>
    <img src=https://api.travis-ci.org/cv-library/Test2-Tools-xUnit.svg>
</a>
<a href=https://coveralls.io/r/cv-library/Test2-Tools-xUnit>
    <img src=https://coveralls.io/repos/cv-library/Test2-Tools-xUnit/badge.svg>
</a>
<a href=https://metacpan.org/pod/Test2::Tools::xUnit>
    <img src=https://badge.fury.io/pl/Test2-Tools-xUnit.svg>
</a>
<a href=https://github.com/cv-library/Test2-Tools-xUnit/issues>
    <img src=https://img.shields.io/github/issues/cv-library/Test2-Tools-xUnit.svg>
</a>

=head1 SYNOPSIS

 use Test2::Tools::xUnit;
 use Test2::V0;

 # BeforeAll/AfterAll are called once, as class methods.
 my $dbh;

 sub startup : BeforeAll {
    $dbh = DBI->connect(...);
 }

 sub shutdown : AfterAll {
    $dbh->disconnect;
 }

 # BeforeEach/AfterEach are called once per test method, on an instance.
 sub setup : BeforeEach {
    my $self = shift;
 }

 sub teardown : AfterEach {
    my $self = shift;
 }

 # Tests are indicated with the :Test attribute.  You can make multiple
 # assertions per test if desired.  Each method is called on a new instance.
 sub test : Test {
    my $self = shift;

 }

 # Skip tests if you don't want them to be run.
 sub skipped_test : Test Skip {
    my $self = shift;

 }

 # Todo tests will be run; failures are reported and ignored.
 sub todo_test : Test Todo {
    my $self = shift;

 }

 done_testing;

=head1 DESCRIPTION

=head2 Lack of inheritance

Note that your test classes should not inherit from Test2::Tools::xUnit;
importing the module is enough to make the subroutine attributes work.

This behaviour differs from L<Test::Class>, L<Test::Class::Moose> and
older implementations of xUnit in other languages.

=head2 Test instance construction

If your test class has a 'new' method, it will be called to construct
instances of the class.

If no such method exists, Test2::Tools::xUnit will bless a hash into the
calling package for you.  For example, this test passes:

 package Foo;

 use Test2::Tools::xUnit;
 use Test2::V0;
 use Scalar::Util qw(reftype blessed);

 sub called_with_reference_to_blessed_hash : Test {
     my $self = shift;
     is blessed($self), 'Foo';
     is reftype($self), 'HASH';
 }

 done_testing;

=head2 Test instance lifecycle

Test2::Tools::xUnit creates a new object per test method, to promote
isolation of tests.  The following tests both pass, regardless of the order
in which they are called:

 use Test2::Tools::xUnit;
 use Test2::V0;

 sub new { bless { list => [] }, shift }

 sub add_one_to_list : Test {
     my $self = shift;
     push @{$self->{list}}, "one";
     is @{$self->{list}}, 1, "list should have one element";
 }

 sub check_list_is_empty : Test {
     is @{shift->{list}}, 0, "list should be empty";
 }

 done_testing;

This behaviour is shared with JUnit, but differs from some other xUnit
implementations such as NUnit or L<Test::Class>.  For more discussion, see
L<https://martinfowler.com/bliki/JunitNewInstance.html>

=head2 Choice of object framework

Test2::Tools::xUnit will work with your choice of Perl object system, or
none.  Here is a fictitious example using Moo:

 package Calculator::Test;

 use Moo;
 use Test2::Tools::xUnit;
 use Test2::V0;
 use Calculator;

 has 'calc' => ( is => 'ro', default => sub { Calculator->new } );

 sub addition : Test {
     my $result = shift->calc->add(2, 2);
     is $result, 4, "2 + 2 should equal 4";
 }

 done_testing;

The C<default> value of the C<calc> attribute combines with the lifecycle
described above to make a concise alternative to a C<BeforeEach> setup method.

=head1 COPYRIGHT AND LICENSE

Copyright Â© 2018 CV-Library Ltd.

This is free software; you can redistribute it and/or modify it under the
same terms as Perl itself.

